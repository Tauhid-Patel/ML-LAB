{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Q2","provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["#import all libraries\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n"],"metadata":{"id":"iwcXXOFox8vA","executionInfo":{"status":"ok","timestamp":1658150302399,"user_tz":-330,"elapsed":559,"user":{"displayName":"ANUSHKA VAIDYA","userId":"15574420503524993925"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"s3GNe4vxw8Uz","executionInfo":{"status":"ok","timestamp":1657951994878,"user_tz":-330,"elapsed":27566,"user":{"displayName":"VAIBHAV PAWASKAR","userId":"10675193253617496738"}},"outputId":"f9bf42d3-ae33-48cc-af4c-18642e830433"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["#mount drive\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"Ld4bWgWTpJ8L","executionInfo":{"status":"ok","timestamp":1657952059670,"user_tz":-330,"elapsed":3562,"user":{"displayName":"VAIBHAV PAWASKAR","userId":"10675193253617496738"}},"outputId":"6ff752a0-9cb7-4945-ae19-006ac3c2a02a","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["#import dataset\n","df=pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Dataset/Copy of Social_Network_Ads.csv')\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"MavUJ84uy0JH","executionInfo":{"status":"ok","timestamp":1657870635045,"user_tz":-330,"elapsed":596,"user":{"displayName":"KIRTI VICHARE","userId":"13723465778447112781"}},"outputId":"9eb63b64-8d31-4114-f94c-0650ec7fa68f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      User ID  Gender  Age  EstimatedSalary  Purchased\n","0    15624510    Male   19            19000          0\n","1    15810944    Male   35            20000          0\n","2    15668575  Female   26            43000          0\n","3    15603246  Female   27            57000          0\n","4    15804002    Male   19            76000          0\n","..        ...     ...  ...              ...        ...\n","395  15691863  Female   46            41000          1\n","396  15706071    Male   51            23000          1\n","397  15654296  Female   50            20000          1\n","398  15755018    Male   36            33000          0\n","399  15594041  Female   49            36000          1\n","\n","[400 rows x 5 columns]"],"text/html":["\n","  <div id=\"df-30c23636-ecc7-4369-a448-786d39fe49ee\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>User ID</th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>EstimatedSalary</th>\n","      <th>Purchased</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>15624510</td>\n","      <td>Male</td>\n","      <td>19</td>\n","      <td>19000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>15810944</td>\n","      <td>Male</td>\n","      <td>35</td>\n","      <td>20000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>15668575</td>\n","      <td>Female</td>\n","      <td>26</td>\n","      <td>43000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>15603246</td>\n","      <td>Female</td>\n","      <td>27</td>\n","      <td>57000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>15804002</td>\n","      <td>Male</td>\n","      <td>19</td>\n","      <td>76000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>395</th>\n","      <td>15691863</td>\n","      <td>Female</td>\n","      <td>46</td>\n","      <td>41000</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>396</th>\n","      <td>15706071</td>\n","      <td>Male</td>\n","      <td>51</td>\n","      <td>23000</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>397</th>\n","      <td>15654296</td>\n","      <td>Female</td>\n","      <td>50</td>\n","      <td>20000</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>398</th>\n","      <td>15755018</td>\n","      <td>Male</td>\n","      <td>36</td>\n","      <td>33000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>399</th>\n","      <td>15594041</td>\n","      <td>Female</td>\n","      <td>49</td>\n","      <td>36000</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>400 rows Ã— 5 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-30c23636-ecc7-4369-a448-786d39fe49ee')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-30c23636-ecc7-4369-a448-786d39fe49ee button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-30c23636-ecc7-4369-a448-786d39fe49ee');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["#display last 5 records\n","df.head()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"F7NJvUOuzTQP","executionInfo":{"status":"ok","timestamp":1657870672288,"user_tz":-330,"elapsed":634,"user":{"displayName":"KIRTI VICHARE","userId":"13723465778447112781"}},"outputId":"9af8c592-0651-4def-a0d4-8cc2d4cd8f9f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      User ID  Gender  Age  EstimatedSalary  Purchased\n","148  15779862    Male   29            61000          0\n","140  15807909    Male   19            85000          0\n","59   15789109  Female   32           117000          0\n","60   15814004    Male   27            20000          0\n","125  15697020  Female   39            61000          0"],"text/html":["\n","  <div id=\"df-ec01e57c-e284-4396-b3d4-7d40da7d669f\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>User ID</th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>EstimatedSalary</th>\n","      <th>Purchased</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>148</th>\n","      <td>15779862</td>\n","      <td>Male</td>\n","      <td>29</td>\n","      <td>61000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>140</th>\n","      <td>15807909</td>\n","      <td>Male</td>\n","      <td>19</td>\n","      <td>85000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>59</th>\n","      <td>15789109</td>\n","      <td>Female</td>\n","      <td>32</td>\n","      <td>117000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>60</th>\n","      <td>15814004</td>\n","      <td>Male</td>\n","      <td>27</td>\n","      <td>20000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>125</th>\n","      <td>15697020</td>\n","      <td>Female</td>\n","      <td>39</td>\n","      <td>61000</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ec01e57c-e284-4396-b3d4-7d40da7d669f')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-ec01e57c-e284-4396-b3d4-7d40da7d669f button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-ec01e57c-e284-4396-b3d4-7d40da7d669f');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["# Display scatter plot of age vs estimated salary\n","sns.scatterplot(df.Age, df.EstimatedSalary)\n","plt.title('Scatterplot')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":367},"id":"m5KKtD4JzuSW","executionInfo":{"status":"ok","timestamp":1657870770742,"user_tz":-330,"elapsed":983,"user":{"displayName":"KIRTI VICHARE","userId":"13723465778447112781"}},"outputId":"2de53a63-9def-4911-9a6b-b28ec58c7e4a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n","  FutureWarning\n"]},{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Scatterplot')"]},"metadata":{},"execution_count":9},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["df.Gender.value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AWbtIoAp1Lld","executionInfo":{"status":"ok","timestamp":1657871630660,"user_tz":-330,"elapsed":353,"user":{"displayName":"KIRTI VICHARE","userId":"13723465778447112781"}},"outputId":"22a3b429-31bb-487d-b656-3ffc82adfafa"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Female    204\n","Male      196\n","Name: Gender, dtype: int64"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["# Plot Gender wise count of entries.\n","sns.countplot(df.Gender)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":351},"id":"EpeWQViz4wio","executionInfo":{"status":"ok","timestamp":1657871632207,"user_tz":-330,"elapsed":853,"user":{"displayName":"KIRTI VICHARE","userId":"13723465778447112781"}},"outputId":"d2045790-713b-44df-dbbf-84752496e94e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n","  FutureWarning\n"]},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f9506b446d0>"]},"metadata":{},"execution_count":11},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["\n","X=df.iloc[:,[2,3]].values #x is independent var\n","y=df.iloc[:,4].values # y in dependent on X\n"],"metadata":{"id":"2rRL9Cwu7LwL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#split test=25 train=75\n","from sklearn.model_selection import train_test_split\n","\n","X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=0)"],"metadata":{"id":"Rffd2x_L5l0D"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#feature scaling\n","from sklearn.preprocessing import StandardScaler\n","sc=StandardScaler()\n","X_train = sc.fit_transform(X_train)\n","X_test = sc.transform(X_test)\n","y_train=sc.fit_transform(y_train)\n","y_test=sc.transform(y_test)\n","\n","\n"],"metadata":{"id":"bJtfixr-77Cu","colab":{"base_uri":"https://localhost:8080/","height":235},"executionInfo":{"status":"error","timestamp":1658150569627,"user_tz":-330,"elapsed":548,"user":{"displayName":"ANUSHKA VAIDYA","userId":"15574420503524993925"}},"outputId":"fa0e721f-e084-4691-cdc5-97cc42dafc95"},"execution_count":2,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-e11a1b58279b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpreprocessing\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mStandardScaler\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0msc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mStandardScaler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mX_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mX_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m y_train=sc.fit_transform(x\n","\u001b[0;31mNameError\u001b[0m: name 'X_train' is not defined"]}]},{"cell_type":"code","source":["\n","#Apply logistic regression algo. with solver=â€™liblinearâ€™ and multi_class=â€™ovrâ€™\n","from sklearn.linear_model import LogisticRegression\n","\n","logreg = LogisticRegression(solver='liblinear',multi_class='ovr',random_state=0)\n","\n","\n"],"metadata":{"id":"08T2C5vP977p"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Train the model and predict outcome using test data\n","logreg.fit(X_train,y_train)\n","y_pred=logreg.predict(X_test)\n","y_pred"],"metadata":{"id":"f8XI_XZQBaZs","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1657871661814,"user_tz":-330,"elapsed":413,"user":{"displayName":"KIRTI VICHARE","userId":"13723465778447112781"}},"outputId":"3f9f6bd8-c911-4edc-e6e2-e9b73deb09db"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1,\n","       0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n","       1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,\n","       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1,\n","       0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1])"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["#y_train_pred\n","y_train_pred=logreg.predict(X_train)"],"metadata":{"id":"ql2wgbuTC0JK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Display accuracy of the model\n","from sklearn.metrics import accuracy_score\n","\n","print(\"Testing Accuracy=\"+str(accuracy_score(y_test,y_pred)))\n","print(\"Training Accuracy=\"+str(accuracy_score(y_train,y_train_pred)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ktTCk49tBvej","executionInfo":{"status":"ok","timestamp":1657871861571,"user_tz":-330,"elapsed":754,"user":{"displayName":"KIRTI VICHARE","userId":"13723465778447112781"}},"outputId":"086d3ac0-4d59-42a6-b13c-ca8ad654454e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Testing Accuracy=0.89\n","Training Accuracy=0.8233333333333334\n"]}]}]}